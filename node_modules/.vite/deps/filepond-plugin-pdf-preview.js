import "./chunk-2TUXWMP5.js";

// node_modules/filepond-plugin-pdf-preview/dist/filepond-plugin-pdf-preview.esm.js
var isPreviewablePdf = (file) => /pdf$/.test(file.type);
var createPdfView = (_) => _.utils.createView({
  name: "pdf-preview",
  tag: "div",
  ignoreRect: true,
  create: ({ root, props }) => {
    const item = root.query("GET_ITEM", { id: props.id });
    if (isPreviewablePdf(item.file)) {
      const numPdfPreviewHeight = root.query("GET_PDF_PREVIEW_HEIGHT");
      root.ref.pdf = document.createElement("object");
      root.ref.pdf.setAttribute("height", numPdfPreviewHeight);
      root.ref.pdf.setAttribute("width", "100%");
      root.ref.pdf.setAttribute(
        "style",
        "position:absolute;left:0;right:0;margin:auto;padding-top:unset;" + (numPdfPreviewHeight ? "height:" + numPdfPreviewHeight + "px;" : "")
      );
      root.element.appendChild(root.ref.pdf);
    }
  },
  write: _.utils.createRoute({
    DID_PDF_PREVIEW_LOAD: ({ root, props }) => {
      const { id } = props;
      const item = root.query("GET_ITEM", { id });
      if (!item) return;
      let URL = window.URL || window.webkitURL;
      let blob = new Blob([item.file], { type: item.file.type });
      root.ref.pdf.type = item.file.type;
      if (isPreviewablePdf(item.file)) {
        const sPdfComponentExtraParams = root.query("GET_PDF_COMPONENT_EXTRA_PARAMS");
        root.ref.pdf.data = URL.createObjectURL(blob) + (!sPdfComponentExtraParams ? "" : "#?" + sPdfComponentExtraParams);
      }
      root.ref.pdf.addEventListener(
        "load",
        () => {
          if (isPreviewablePdf(item.file)) {
            root.dispatch("DID_UPDATE_PANEL_HEIGHT", {
              id,
              height: root.ref.pdf.scrollHeight
            });
          }
        },
        false
      );
    }
  })
});
var createPdfWrapperView = (_) => {
  const didCreatePreviewContainer = ({ root, props }) => {
    const { id } = props;
    const item = root.query("GET_ITEM", id);
    if (!item) return;
    root.dispatch("DID_PDF_PREVIEW_LOAD", {
      id
    });
  };
  const create = ({ root, props }) => {
    const pdf = createPdfView(_);
    root.ref.pdf = root.appendChildView(
      root.createChildView(pdf, {
        id: props.id
      })
    );
  };
  return _.utils.createView({
    name: "pdf-preview-wrapper",
    create,
    write: _.utils.createRoute({
      // pdf preview stated
      DID_PDF_PREVIEW_CONTAINER_CREATE: didCreatePreviewContainer
    })
  });
};
var plugin = (fpAPI) => {
  const { addFilter, utils } = fpAPI;
  const { Type, createRoute } = utils;
  const pdfWrapperView = createPdfWrapperView(fpAPI);
  addFilter("CREATE_VIEW", (viewAPI) => {
    const { is, view, query } = viewAPI;
    if (!is("file")) {
      return;
    }
    const didLoadItem = ({ root, props }) => {
      const { id } = props;
      const item = query("GET_ITEM", id);
      if (!item || item.archived || !isPreviewablePdf(item.file)) {
        return;
      }
      root.ref.pdfPreview = view.appendChildView(
        view.createChildView(pdfWrapperView, { id })
      );
      root.dispatch("DID_PDF_PREVIEW_CONTAINER_CREATE", { id });
    };
    view.registerWriter(
      createRoute(
        {
          DID_LOAD_ITEM: didLoadItem
        },
        ({ root, props }) => {
          const { id } = props;
          const item = query("GET_ITEM", id);
          if (!isPreviewablePdf(item.file) || root.rect.element.hidden)
            return;
        }
      )
    );
  });
  return {
    options: {
      allowPdfPreview: [true, Type.BOOLEAN],
      // Fixed PDF preview height
      pdfPreviewHeight: [320, Type.INT],
      // Extra params to pass to the pdf visulizer
      pdfComponentExtraParams: ["toolbar=0&navpanes=0&scrollbar=0&statusbar=0&zoom=0&messages=0&view=fitH&page=1", Type.STRING]
    }
  };
};
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
if (isBrowser) {
  document.dispatchEvent(
    new CustomEvent("FilePond:pluginloaded", { detail: plugin })
  );
}
var filepond_plugin_pdf_preview_esm_default = plugin;
export {
  filepond_plugin_pdf_preview_esm_default as default
};
/*! Bundled license information:

filepond-plugin-pdf-preview/dist/filepond-plugin-pdf-preview.esm.js:
  (*!
   * FilePondPluginPdfPreview 1.0.2
   * Licensed under MIT, https://opensource.org/licenses/MIT/
   * Please visit undefined for details.
   *)
*/
//# sourceMappingURL=filepond-plugin-pdf-preview.js.map
